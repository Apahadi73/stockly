{"version":3,"sources":["components/Chart.js","components/Stock.js","components/SearchBar.js","App.js","index.js"],"names":["Chart","daysX","valuesY","label","companySymbol","isMobile","useMediaQuery","isTablet","isDesktop","useEffect","data","x","y","type","mode","marker","color","layout","width","height","title","Stock","useState","stockCharXValues","setStockXValues","stockOpeningValues","setStockOpeningValues","stockClosingValues","setStockClosingValues","a","days","openingValues","closingValues","apiUrl","process","fetch","response","json","responseData","console","log","Object","keys","forEach","day","push","fetchStock","className","SearchBar","props","userInput","setUserInput","placeholder","onChange","event","target","value","onKeyDown","key","inputHandler","onClick","App","setCompanySymbol","ReactDOM","render","document","querySelector"],"mappings":"6OAoDeA,EA/CD,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,QAAwBC,GAAY,EAA3BC,cAA2B,EAAZD,OAEzCE,EAAWC,YAAc,sBACzBC,EAAWD,YAAc,6CACzBE,EAAYF,YAAc,8CAChCG,qBAAU,cAAU,CAAER,EAAOC,IAoB7B,OACC,6BACC,kBAAC,IAAD,CACCQ,KAAM,CACL,CACCC,EAAGV,EACHW,EAAGV,EACHW,KAAM,UACNC,KAAM,gBACNC,OAAQ,CAAEC,MAAO,WAGnBC,OAAQ,CACPC,MA9BCb,GAAYE,EACR,IACGC,EACH,IAEA,IA0BLW,OAtBCd,GAAYE,GAELC,EADH,IAIA,IAkBLY,MAAOjB,OCqBGkB,G,MA9DD,SAAC,GAAuB,IAArBjB,EAAoB,EAApBA,cAAoB,EACUkB,qBADV,mBAC5BC,EAD4B,KACVC,EADU,OAEkBF,qBAFlB,mBAE5BG,EAF4B,KAERC,EAFQ,OAGkBJ,qBAHlB,mBAG5BK,EAH4B,KAGRC,EAHQ,KAsCpC,OAhCAnB,qBACC,YACiB,uCAAG,wCAAAoB,EAAA,6DACdC,EAAO,GACPC,EAAgB,GAChBC,EAAgB,GAEhBC,EALc,uFAK2E7B,EAL3E,sCAKsH8B,oBALtH,kBASMC,MAAMF,GATZ,cASXG,EATW,iBAUUA,EAASC,OAVnB,QAUXC,EAVW,OAWX5B,EAAO4B,EAAa,uBAC1BC,QAAQC,IAAI9B,IACZoB,EAAOW,OAAOC,KAAKhC,IACdiC,SAAQ,SAACC,GACbb,EAAcc,KAAKnC,EAAKkC,GAAK,YAC7BZ,EAAca,KAAKnC,EAAKkC,GAAK,gBAG9BpB,EAAgBM,GAChBJ,EAAsBK,GACtBH,EAAsBI,GArBL,kDAuBjBO,QAAQC,IAAR,MAvBiB,0DAAH,qDA0BhBM,KAED,CAAE1C,IAGF,yBAAK2C,UAAU,mBACbxB,GACA,6BACC,sCAAQnB,EAAR,uCAEA,kBAAC,EAAD,CACCH,MAAOsB,EACPrB,QAASuB,EACTrB,cAAeA,EACfD,MAAM,oCAEP,kBAAC,EAAD,CACCF,MAAOsB,EACPrB,QAASyB,EACTvB,cAAeA,EACfD,MAAM,wCCxBG6C,G,MAhCG,SAACC,GAAW,IAAD,EACQ3B,qBADR,mBACpB4B,EADoB,KACTC,EADS,KAiB5B,OACC,yBAAKJ,UAAU,yBACd,2BACClC,KAAK,OACLuC,YAAY,iCACZC,SATqB,SAACC,GACxBH,EAAaG,EAAMC,OAAOC,QASxBC,UApBoB,SAACH,GACL,UAAdA,EAAMI,MACTnB,QAAQC,IAAIc,EAAMC,OAAOC,OACzBP,EAAMU,aAAaT,OAmBnB,yBAAKH,UAAU,iBAAiBa,QAhBV,SAACN,GACxBL,EAAMU,aAAaT,KAelB,aCVYW,EAZH,SAACZ,GAAW,IAAD,EACsB3B,qBADtB,mBACdlB,EADc,KACC0D,EADD,KAEtB,OACC,yBAAKf,UAAU,gBACd,6BACC,kBAAC,EAAD,CAAWY,aAAcG,IACzB,kBAAC,EAAD,CAAO1D,cAAeA,OCP1B2D,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.27dce7ae.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport Plot from 'react-plotly.js';\nimport useMediaQuery from 'react-use-media-query-hook';\n//props received from stock component\n// draws chart\nconst Chart = ({ daysX, valuesY, companySymbol, label }) => {\n\t// variables used for making chart responsive\n\tconst isMobile = useMediaQuery('(max-width: 400px)');\n\tconst isTablet = useMediaQuery('(min-width: 401px) and (max-width: 640px)');\n\tconst isDesktop = useMediaQuery('(min-width: 641px) and (max-width: 1024px)');\n\tuseEffect(() => {}, [ daysX, valuesY ]);\n\n\tconst setChartWidth = () => {\n\t\tif (isMobile || isTablet) {\n\t\t\treturn 330;\n\t\t} else if (isDesktop) {\n\t\t\treturn 500;\n\t\t} else {\n\t\t\treturn 800;\n\t\t}\n\t};\n\tconst setChartHeight = () => {\n\t\tif (isMobile || isTablet) {\n\t\t\treturn 400;\n\t\t} else if (isDesktop) {\n\t\t\treturn 400;\n\t\t} else {\n\t\t\treturn 600;\n\t\t}\n\t};\n\treturn (\n\t\t<div>\n\t\t\t<Plot\n\t\t\t\tdata={[\n\t\t\t\t\t{\n\t\t\t\t\t\tx: daysX,\n\t\t\t\t\t\ty: valuesY,\n\t\t\t\t\t\ttype: 'scatter',\n\t\t\t\t\t\tmode: 'lines+markers',\n\t\t\t\t\t\tmarker: { color: 'green' }\n\t\t\t\t\t}\n\t\t\t\t]}\n\t\t\t\tlayout={{\n\t\t\t\t\twidth: setChartWidth(),\n\t\t\t\t\theight: setChartHeight(),\n\t\t\t\t\ttitle: label\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from 'react';\nimport Chart from './Chart';\nimport './Stock.css';\n// receives props from the app.js and fetches stocks data from api\nconst Stock = ({ companySymbol }) => {\n\tconst [ stockCharXValues, setStockXValues ] = useState();\n\tconst [ stockOpeningValues, setStockOpeningValues ] = useState();\n\tconst [ stockClosingValues, setStockClosingValues ] = useState();\n\n\t// fetch stock data when the stock components mounts onto the screen\n\tuseEffect(\n\t\t() => {\n\t\t\tconst fetchStock = async () => {\n\t\t\t\tlet days = [];\n\t\t\t\tlet openingValues = [];\n\t\t\t\tlet closingValues = [];\n\t\t\t\t// api url that returns last 100 days stock history of a product\n\t\t\t\tlet apiUrl = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${companySymbol}&outputsize=compact&apikey=${process\n\t\t\t\t\t.env.REACT_APP_STOCK_API_KEY}`;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(apiUrl);\n\t\t\t\t\tconst responseData = await response.json();\n\t\t\t\t\tconst data = responseData['Time Series (Daily)'];\n\t\t\t\t\tconsole.log(data);\n\t\t\t\t\tdays = Object.keys(data);\n\t\t\t\t\tdays.forEach((day) => {\n\t\t\t\t\t\topeningValues.push(data[day]['1. open']);\n\t\t\t\t\t\tclosingValues.push(data[day]['4. close']);\n\t\t\t\t\t});\n\t\t\t\t\t//setting states\n\t\t\t\t\tsetStockXValues(days);\n\t\t\t\t\tsetStockOpeningValues(openingValues);\n\t\t\t\t\tsetStockClosingValues(closingValues);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t}\n\t\t\t};\n\t\t\tfetchStock();\n\t\t},\n\t\t[ companySymbol ]\n\t);\n\treturn (\n\t\t<div className=\"stock-component\">\n\t\t\t{stockCharXValues && (\n\t\t\t\t<div>\n\t\t\t\t\t<h2>{`${companySymbol} stock history (in last 100 days) `}</h2>\n\n\t\t\t\t\t<Chart\n\t\t\t\t\t\tdaysX={stockCharXValues}\n\t\t\t\t\t\tvaluesY={stockOpeningValues}\n\t\t\t\t\t\tcompanySymbol={companySymbol}\n\t\t\t\t\t\tlabel=\"Opening values in last 100 days\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Chart\n\t\t\t\t\t\tdaysX={stockCharXValues}\n\t\t\t\t\t\tvaluesY={stockClosingValues}\n\t\t\t\t\t\tcompanySymbol={companySymbol}\n\t\t\t\t\t\tlabel=\"Closing values in last 100 days\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Stock;\n","import React, { useState } from 'react';\n\nconst SearchBar = (props) => {\n\tconst [ userInput, setUserInput ] = useState();\n\n\tconst onEnterPressed = (event) => {\n\t\tif (event.key === 'Enter') {\n\t\t\tconsole.log(event.target.value);\n\t\t\tprops.inputHandler(userInput); //set userinput value in app js state\n\t\t}\n\t};\n\tconst onButtonClicked = (event) => {\n\t\tprops.inputHandler(userInput); //set userinput value in app js state\n\t};\n\n\tconst onChangeHandler = (event) => {\n\t\tsetUserInput(event.target.value);\n\t};\n\n\treturn (\n\t\t<div className=\"ui fluid action input\">\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tplaceholder=\"Enter the stock symbol here...\"\n\t\t\t\tonChange={onChangeHandler}\n\t\t\t\tonKeyDown={onEnterPressed}\n\t\t\t/>\n\t\t\t<div className=\"ui blue button\" onClick={onButtonClicked}>\n\t\t\t\tSearch\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default SearchBar;\n","import React, { useState } from 'react';\nimport Stock from './components/Stock';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\n\nconst App = (props) => {\n\tconst [ companySymbol, setCompanySymbol ] = useState();\n\treturn (\n\t\t<div className=\"ui container\">\n\t\t\t<div>\n\t\t\t\t<SearchBar inputHandler={setCompanySymbol} />\n\t\t\t\t<Stock companySymbol={companySymbol} />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}